{"version":3,"file":"static/js/684.bb6a4384.chunk.js","mappings":"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","sources":["API.js","components/MoviesList/MoviesList.styled.js","components/MoviesItem/MoviesItem.styled.js","components/MoviesItem/MoviesItem.js","components/MoviesList/MoviesList.js","components/MovieForm/MovieForm.styled.js","components/MovieForm/MovieForm.js","pages/Movies.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '90cfe661c2323ab539dac15dcff3c499';\n\nexport const getTrend = async () => {\n  const res = await axios.get(`trending/movie/day`, {\n    params: {\n      api_key: API_KEY\n    },\n  });\n  return res.data.results;\n};\n\nexport const getMovieById = async (id) => {\n  const res = await axios.get(`movie/${id}&language=en-US`, {\n    params: {\n      api_key: API_KEY\n    },\n  });\n  return res.data;\n};\n\nexport const getMovieCast = async (id) => {\n  const res = await axios.get(`movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return res.data;\n};\n\nexport const getMovieReviews = async (id) => {\n  const res = await axios.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return res.data;\n};\n\nexport const getMovieByName = async (name) => {\n  const res = await axios.get(`search/movie/`, {\n    params: {\n      api_key: API_KEY,\n      query: name,\n      language: 'en-US',\n    },\n  });\n  return res.data;\n};\n\n\n","import styled from 'styled-components'\n\nexport const MoviesGallery = styled.ul`\n    display: grid; \n    max-width: calc(100vw - 48px);\n    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n    grid-gap: 16px;\n    margin-top: 16px;\n    margin-bottom: 0;\n    padding: 0;\n    list-style: none;\n    margin-left: auto;\n    margin-right: auto;\n`;","import styled from \"styled-components\";\n\nexport const MoviePoster = styled.img`\n    width: 100%;\n    height: 90%;\n    object-fit: cover;\n    border-radius-top: 8px;\n`;\n\nexport const MovieWrapper = styled.li`\n    position: relative;\n    border-radius: 8px;\n    box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n    transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover {\n        transform: scale(1.01);\n        cursor: pointer;\n    } \n    > a {\n        text-decoration: none;\n      }   \n`;\n\nexport const MovieVote = styled.span`\n    background-color: orangered;\n    border-radius: 50%;\n    color: #fff;\n    padding: 16px;\n    font-size: 20px;\n    font-weight: 700;\n    position: absolute;\n    top: 16px;\n    left: 16px;\n`;\n\nexport const MovieTitle = styled.p`\n    margin: 8px;\n    font-size: 24px;\n    font-weight: 700;\n`;","import { Link, useLocation } from \"react-router-dom\";\nimport { \n    MoviePoster,\n    MovieWrapper,\n    MovieVote,\n    MovieTitle,\n } from \"./MoviesItem.styled\";\nimport PropTypes from 'prop-types';\n\n\nexport const MoviesItem = ({ movie }) => {\n    const { id, title, poster_path, vote_average } = movie;\n    const { location } = useLocation();\n    const vote = vote_average ? vote_average.toFixed(1) : \"0.0\";\n    \n    return(\n         <MovieWrapper>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n                <MoviePoster src={poster_path\n                ? 'https://image.tmdb.org/t/p/w500' + poster_path\n                : 'https://dummyimage.com/216x361/000/fff&text=No+poster'\n                } alt={title}/> \n                <MovieTitle>{title}</MovieTitle>\n                <MovieVote>{vote}</MovieVote>\n            </Link>\n        </MovieWrapper>\n    )\n}\n\nMoviesItem.propTypes = {\n    movie: PropTypes.exact({\n        id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        release_date: PropTypes.string.isRequired,\n        vote_average: PropTypes.number.isRequired,\n        overview: PropTypes.string.isRequired,\n        poster_path: PropTypes.string,\n    })\n\n};","import { MoviesGallery } from \"./MoviesList.styled\";\nimport { MoviesItem } from \"../MoviesItem/MoviesItem\"\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ movies }) => {\n    return(\n        <MoviesGallery>\n            {movies.map((movie) => (\n                <MoviesItem movie={movie} key={movie.id}/>\n            ))} \n        </MoviesGallery>\n    )\n}\n\nMoviesItem.propTypes = {\n    movies: PropTypes.array,\n}","import styled from 'styled-components'\n\nexport const SearchForm = styled.form`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    max-width: 400px;\n    background-color: #fff;\n    border-radius: 8px;\n    overflow: hidden;\n    border: 2px solid lightgrey;\n    padding-left: 8px;\n    margin: 32px 0;\n`;\n\nexport const SearchFormBtn = styled.button`\n    display: inline-block;\n    width: 48px;\n    height: 48px;\n    border: 0;\n    opacity: 0.6;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n    &:hover {\n        opacity: 1;\n    }\n`;\n\nexport const SearchFormBtnLabel = styled.span`\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    clip-path: inset(50%);\n    border: 0;\n`;\n\nexport const SearchFormInput = styled.input`\n    display: inline-block;\n    width: 100%;\n    font: inherit;\n    font-size: 20px;\n    border: none;\n    outline: none;\n    padding-left: 4px;\n    padding-right: 4px;\n`;","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { ImSearch } from \"react-icons/im\";\nimport Notiflix from 'notiflix';\nimport {\n    SearchForm,\n    SearchFormBtn,\n    SearchFormBtnLabel,\n    SearchFormInput,\n} from \"./MovieForm.styled\";\n\nexport function MovieForm({ handleSubmit, movies }) {\n    const [query, setQuery] = useState('');\n    const [searchParams] = useSearchParams();\n    const userQuery = searchParams.get('query');\n\n    useEffect(() => {\n        if (!movies) return setQuery('');\n\n        setQuery(userQuery);\n    }, [movies, userQuery]);\n    \n    const onChange = e => {\n        setQuery(e.target.value);\n    };\n   \n    const onSubmit = e => {\n        e.preventDefault();\n        \n        if(query.trim() === '') {\n            return Notiflix.Notify.warning('Enter your query');\n        }\n        handleSubmit(query);\n        setQuery('');\n    };\n\n    return (\n        <SearchForm \n        onSubmit={onSubmit}\n        movies={movies}\n        >\n            <SearchFormInput\n                type=\"text\"\n                autocomplete=\"off\"\n                autoFocus\n                placeholder=\"Search movie\"\n                value={query}\n                onChange={onChange}\n            />\n\n            <SearchFormBtn type=\"submit\">\n                <SearchFormBtnLabel>Search</SearchFormBtnLabel>\n                <ImSearch/>\n            </SearchFormBtn>\n        </SearchForm>\n    );\n}\n","import { MovieForm } from \"../components/MovieForm/MovieForm\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { getMovieByName } from \"../API\"\nimport { MoviesList } from \"../components/MoviesList/MoviesList\";\n\nexport default function Movies(){\n    const [movies, setMovies] = useState([]);\n    const [query, setQuery] = useState('');\n    const [searchParams, setSearchParams] = useSearchParams();\n    const userQuery = searchParams.get('query');\n\n    useEffect(() => {\n        if(query === ''){\n            return;\n        }\n        (async () => {\n            const res = await getMovieByName(query);\n            setMovies(res.results);\n            setSearchParams({ query: query });\n        })();\n    }, [query, setSearchParams]);\n\n    useEffect(() => {\n        if (userQuery === null) {\n            setMovies(null);\n            setQuery('');\n            return;\n        }\n\n        setQuery(userQuery);\n    }, [userQuery]);\n\n    return (\n        <main>\n            <MovieForm handleSubmit={setQuery} movies={movies}/>\n            {movies && <MoviesList movies={movies}/>}\n\n        </main>\n    )\n}"],"names":["axios","API_KEY","getTrend","params","api_key","res","data","results","getMovieById","id","getMovieCast","language","getMovieReviews","getMovieByName","name","query","MoviesGallery","styled","MoviePoster","MovieWrapper","MovieVote","MovieTitle","MoviesItem","movie","title","poster_path","vote_average","location","useLocation","vote","toFixed","to","state","from","src","alt","MoviesList","movies","map","propTypes","PropTypes","SearchForm","SearchFormBtn","SearchFormBtnLabel","SearchFormInput","MovieForm","handleSubmit","useState","setQuery","useSearchParams","userQuery","get","useEffect","onSubmit","e","preventDefault","trim","Notiflix","type","autocomplete","autoFocus","placeholder","value","onChange","target","Movies","setMovies","searchParams","setSearchParams"],"sourceRoot":""}